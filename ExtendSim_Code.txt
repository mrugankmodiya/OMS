//Edited this file
//Making a change
integer i,j,k;
integer u;
integer a;
integer check;
integer fc;
integer unique;
real zone;
integer count, pcl_cnt;
integer test[8], skufc[8], finskufc[8], test1[8], test_op[8], test_oq[8], test_dpci[8];
integer oh1,oh2,oh3,oh4,oh5,oh6,oh7,oh8;
integer recnum;
integer recnum1,recnum2,recnum3,recnum4,recnum5, recnum6, recnum7, recnum8;
integer fc_dpci1, fc_dpci2, fc_dpci3, fc_dpci4, fc_dpci5, fc_dpci6, fc_dpci7, fc_dpci8;
real temp_flt, sumofwt;
integer sum_pcl_units;
real mincost;
real cpm,distance, item_cost,fc_cost, tptmax, tptavail;
real unfillskucost,splitcost, totcost,fincost;
real transittime[8];
real wave[8],process[8],dwell[8], test_wt[8];
integer dpci[8];
integer oq[8];
integer ohnew;
integer rec;
integer ordmax_recnum;
integer tptavailable;
integer tptcondition;
integer sumofunits;

//initialization
fincost=10000000.0;
unfillskucost=1000000.0;
splitcost=1000.0;

for(j=0;j<8;j++)
{
     finskufc[j]=0;
     test1[j]=0;
     skufc[j]=0;
     test[j]=0;
     dpci[0]=0;
     oq[j] = 0;
     test_wt[j] = 0.0;
     test_sa[j] = 0;
     test_oq[j] = 0;
     test_dpci[j]=0;      
}

count=0;
unique=0;
cpm=0.0;
distance=0.0;
item_cost=0.0;
fc_cost=0.0;
totcost=0.0;
tptmax=0.0;
tptavail=0.0;
fc_dpci1=0;
fc_dpci2=0;
fc_dpci3=0;
fc_dpci4=0;
fc_dpci5=0;
fc_dpci6=0;
fc_dpci7=0;
fc_dpci8=0;
dpci[0]=dpci_1;
dpci[1]=dpci_2;
dpci[2]=dpci_3;
dpci[3]=dpci_4;
dpci[4]=dpci_5;
dpci[5]=dpci_6;
dpci[6]=dpci_7;
dpci[7]=dpci_8;
oq[0]=ord_q1;
oq[1]=ord_q2;
oq[2]=ord_q3;
oq[3]=ord_q4;
oq[4]=ord_q5;      
oq[5]=ord_q6;
oq[6]=ord_q7;
oq[7]=ord_q8;     

for (i=1; i<=DBFieldsGetNum(2,4)-7;i++)
{
     skufc[0]=finskufc[0];
     skufc[1]=finskufc[1];
     skufc[2]=finskufc[2];
     skufc[3]=finskufc[3];
     skufc[4]=finskufc[4];
     skufc[5]=finskufc[5];
     skufc[6]=finskufc[6];
     skufc[7]=finskufc[7];
      
     if(dpci_1>0)
     {
          recnum1=dbdatagetasnumber(2,4,i+7,dpci_1); 
          oh1=recnum1;
          if(recnum1>0)
          {
               //oh1=dbdatagetasnumber(2,3,5,recnum1);
               ordmax_recnum = (i-1)*365+ceil(currenttime);
               tptavailable = dbdatagetasnumber(2,12,4,ordmax_recnum);
               if(i>7)
                    tptcondition = 1;
               else
                    tptcondition = ord_q1;
               
               if(oh1<ord_q1 || tptavailable<tptcondition)
                  {
                    //DBRecordsInsert(2,9,0,1);
                    //rec=DBRecordsGetNum(2,9);
                    //DBDataSetAsNumber(2,9,1,rec,recnum1);
                    recnum1=0;
                  }
               else
                    skufc[0]=i+7;
          }
     }
     else
     recnum1=0;

     if(dpci_2>0)
     {
          recnum2=dbdatagetasnumber(2,4,i+7,dpci_2);
          oh2=recnum2;
          if(recnum2>0)
          {
               //oh2=dbdatagetasnumber(2,3,5,recnum2);
               ordmax_recnum = (i-1)*365+ceil(currenttime);
               tptavailable = dbdatagetasnumber(2,12,4,ordmax_recnum);
               if(i>7)
                    tptcondition = 1;
               else
                    tptcondition = ord_q2;
               
               if(oh2<ord_q2 || tptavailable<tptcondition)
                  {
                    recnum2=0;                   
                  }
               else
                    skufc[1]=i+7;
          }
     }
     else
     recnum2=0;

     if(dpci_3>0)
     {
          recnum3=dbdatagetasnumber(2,4,i+7,dpci_3);
          oh3=recnum3;
          if(recnum3>0)
          {
               //oh3=dbdatagetasnumber(2,3,5,recnum3);
               ordmax_recnum = (i-1)*365+ceil(currenttime);
               tptavailable = dbdatagetasnumber(2,12,4,ordmax_recnum);
               if(i>7)
                    tptcondition = 1;
               else
                    tptcondition = ord_q3;
               
               if(oh3<ord_q3 || tptavailable<tptcondition)
                  {
                    recnum3=0;     
                  }
               else
                    skufc[2]=i+7;
          }
     }
     else
     recnum3=0;

     if(dpci_4>0)
     {
          recnum4=dbdatagetasnumber(2,4,i+7,dpci_4);
          oh4=recnum4;
          if(recnum4>0)
          {
               //oh4=dbdatagetasnumber(2,3,5,recnum4);
               ordmax_recnum = (i-1)*365+ceil(currenttime);
               tptavailable = dbdatagetasnumber(2,12,4,ordmax_recnum);
               if(i>7)
                    tptcondition = 1;
               else
                    tptcondition = ord_q4;
               
               if(oh4<ord_q4 || tptavailable<tptcondition)
                  {
                    recnum4=0;     
                  }
               else
                    skufc[3]=i+7;
          }
     }
     else
     recnum4=0;

     if(dpci_5>0)
     {
          recnum5=dbdatagetasnumber(2,4,i+7, dpci_5);
          oh5=recnum5;
          if(recnum5>0)
          {
               //oh5=dbdatagetasnumber(2,3,5,recnum5);
               ordmax_recnum = (i-1)*365+ceil(currenttime);
               tptavailable = dbdatagetasnumber(2,12,4,ordmax_recnum);
               if(i>7)
                    tptcondition = 1;
               else
                    tptcondition = ord_q5;
               
               if(oh5<ord_q5 || tptavailable<tptcondition)
                  {
                    recnum5=0;     
                  }
               else
                    skufc[4]=i+7;
          }
     }
     else
     recnum5=0;

     if(dpci_6>0)
     {
          recnum6=dbdatagetasnumber(2,4,i+7, dpci_6);
          oh6=recnum6;
          if(recnum6>0)
          {
               //oh6=dbdatagetasnumber(2,3,5,recnum6);
               ordmax_recnum = (i-1)*365+ceil(currenttime);
               tptavailable = dbdatagetasnumber(2,12,4,ordmax_recnum);
               if(i>7)
                    tptcondition = 1;
               else
                    tptcondition = ord_q6;
               
               if(oh6<ord_q6 || tptavailable<tptcondition)
               {                  
                    recnum6=0;     
                  }
               else
                    skufc[5]=i+7;
          }
     }
     else
     recnum6=0;
 
     if(dpci_7>0)
     {
          recnum7=dbdatagetasnumber(2,4,i+7, dpci_7);
          oh7=recnum7;
          if(recnum7>0)
          {
               //oh7=dbdatagetasnumber(2,3,5,recnum7);
               ordmax_recnum = (i-1)*365+ceil(currenttime);
               tptavailable = dbdatagetasnumber(2,12,4,ordmax_recnum);
               if(i>7)
                    tptcondition = 1;
               else
                    tptcondition = ord_q7;
               
               if(oh7<ord_q7 || tptavailable<tptcondition)
               {                  
                    recnum7=0;     
                  }
               else
                    skufc[6]=i+7;
          }

     }
     else
     recnum7=0;
 
     if(dpci_8>0)
     {
          recnum8=dbdatagetasnumber(2,4,i+7, dpci_8);
          oh8=recnum8;
          if(recnum8>0)
          {
               //oh8=dbdatagetasnumber(2,3,5,recnum8);
               ordmax_recnum = (i-1)*365+ceil(currenttime);
               tptavailable = dbdatagetasnumber(2,12,4,ordmax_recnum);
               if(i>7)
                    tptcondition = 1;
               else
                    tptcondition = ord_q8;
               
               if(oh8<ord_q8 || tptavailable<tptcondition)
                  {
                    recnum8=0;     
                  }
               else
                    skufc[7]=i+7;
          }
     }
     else
     recnum8=0; 
 

     test[0]= skufc[0];
     test[1]= skufc[1];
     test[2]= skufc[2];
     test[3]= skufc[3];
     test[4]= skufc[4];
     test[5]= skufc[5];
     test[6]= skufc[6];
     test[7]= skufc[7];
     check = recnum1+recnum2+recnum3+recnum4+recnum5+recnum6+recnum7+recnum8;
      
     if(check>0)
     {
          for (j = 0; j < 8; j++)
          {
               for (k = j + 1; k < 8; k++)
               {
                    if (test[j] > test[k])
                    {
                         a =  test[j];
                         test[j] = test[k];
                         test[k] = a;
                    }
               }
          }
          unique=1;
          for(u = 0; u < 7 ; u++)
          {
               if(test[u] != 0)
               {
                    if(test[u]==test[u+1])
                         continue;
                    else
                         unique++;
               }
          }
          totcost=0.0;
          count=0; 
          for(u = 0; u < 8 ; u++)
          {
               if(skufc[u]>0)
               {
                    count++;
                    fc=skufc[u]-7;
                    cpm=dbdatagetasnumber(2,2,4,fc);
                    distance=dbdatagetasnumber(2,2,custzip1,fc);
                    item_cost=dbdatagetasnumber(2,2,5,fc)*oq[u];
                    fc_cost=dbdatagetasnumber(2,2,6,fc)*oq[u];
                    tptmax=dbdatagetasnumber(2,2,7,fc);
                    tptavail=dbdatagetasnumber(2,2,8,fc);
                    wave[u]=RandomCalculate(16,0.35,0.66,0);
                    process[u]=RandomCalculate(12,0.75,0.08,0);
                    dwell[u]=RandomCalculate(12,0.25,0.04,0);
                    transittime[u]=48/24;
                    totcost= totcost + cpm*distance+item_cost+fc_cost;
               }
          }
          count=nSKUs-count;
          unique=unique-1;
          totcost=totcost+count*unfillskucost+splitcost*unique;
          if (totcost<fincost)
          {
               mincost=totcost;
               fincost=totcost;
               finskufc[0]= skufc[0];
               finskufc[1]= skufc[1];
               finskufc[2]= skufc[2];
               finskufc[3]= skufc[3];
               finskufc[4]= skufc[4];
               finskufc[5]= skufc[5];
               finskufc[6]= skufc[6];
               finskufc[7]= skufc[7];
                  
               if(skufc[0]>0)
                    fc_dpci1= skufc[0]-7;
               if(skufc[1]>0)
                    fc_dpci2= skufc[1]-7;
               if(skufc[2]>0)
                    fc_dpci3= skufc[2]-7;
               if(skufc[3]>0)
                    fc_dpci4= skufc[3]-7;
               if(skufc[4]>0)
                    fc_dpci5= skufc[4]-7;
               if(skufc[5]>0)
                    fc_dpci6= skufc[5]-7;
               if(skufc[6]>0)
                    fc_dpci7= skufc[6]-7;
               if(skufc[7]>0)
                    fc_dpci8= skufc[7]-7;
          }
     }
}

for(u = 0; u < 8 ; u++)
{
     if((u+1)<=nSKUs)
     {
          if(finskufc[u]==0)
          {
               DBRecordsInsert(2,11,0,1);
               rec=DBRecordsGetNum(2,11);
               DBDataSetAsNumber(2,11,1,rec,orderid);
               DBDataSetAsNumber(2,11,2,rec,dpci[u]);
               DBDataSetAsNumber(2,11,3,rec,oq[u]);
          }
     }
     if(finskufc[u]>0)
     {
          DBRecordsInsert(2,10,0,1);
          rec=DBRecordsGetNum(2,10);
          recnum=dbdatagetasnumber(2,4,finskufc[u],dpci[u]);
          //ohnew=dbdatagetasnumber(2,3,5,recnum)-oq[u];
          ohnew=recnum-oq[u];
          dbdatasetasnumber(2,4,finskufc[u],dpci[u],ohnew);
          //DBDataSetAsNumber(2,3,5,recnum,ohnew);
          DBDataSetAsNumber(2,10,1,rec,orderid);
          DBDataSetAsNumber(2,10,2,rec,dpci[u]);
          DBDataSetAsNumber(2,10,3,rec,oq[u]);
          DBDataSetAsNumber(2,10,4,rec,finskufc[u]-7);
          DBDataSetAsNumber(2,10,5,rec,wave[u]);
          DBDataSetAsNumber(2,10,6,rec,process[u]);
          DBDataSetAsNumber(2,10,7,rec,dwell[u]);
          DBDataSetAsNumber(2,10,8,rec,transittime[u]);
     }
}


//code to update throughtput


for(j=0;j<8;j++)
{
     if(dpci[j]>0)
     {
           test1[j]=finskufc[j];
           test_wt[j] = dbdatagetasnumber(2,4,5,dpci[j]);
           test_sa[j] = dbdatagetasnumber(2,4,6,dpci[j]);     
           test_oq[j] = oq[j];
           test_dpci[j] = dpci[j];
     }
}

//Sorting Array

for (j = 0; j < 8; j++)
{
     for (k = j + 1; k < 8; k++)
     {
          if (test1[j] > test1[k])
          {
               a =  test1[j];
               test1[j] = test1[k];
               test1[k] = a;

               //Rearraging weights to match the corresponding sorted FC
               temp_flt =  test_wt[j];
               test_wt[j] = test_wt[k];
               test_wt[k] = temp_flt;

               //Rearranging op flag to match the sorted FC
               a =  test_sa[j];
               test_sa[j] = test_sa[k];
               test_sa[k] = a;

               //Rearranging order quantity to match the sorted FC
               a =  test_oq[j];
               test_oq[j] = test_oq[k];
               test_oq[k] = a;

               //Rearranging order quantity to match the sorted FC
               a =  test_dpci[j];
               test_dpci[j] = test_dpci[k];
               test_dpci[k] = a;                     
          }
     }
}


//writing parcel and weight for SA
pcl_cnt=0;
/* ship alone*/
for(u = 0; u < 8 ; u++)
{
   if(test1[u] != 0 && test_sa[u] == 1)
   {
          for(a = 1; a <= test_oq[u] ; a++)
          {
               pcl_cnt++;
			   	if(test_wt[u]>0 && test_wt[u]<=0.0625)
					temp_flt=0.0625;
				if(test_wt[u]>0.0625 && test_wt[u]<=0.1250)
					temp_flt=0.1250;
				if(test_wt[u]>0.1250 && test_wt[u]<=0.1875)
					temp_flt=0.1875;
				if(test_wt[u]>0.1875 && test_wt[u]<=0.2500)
					temp_flt=0.2500;
				if(test_wt[u]>0.2500 && test_wt[u]<=0.3125)
					temp_flt=0.3125;
				if(test_wt[u]>0.3125 && test_wt[u]<=0.3750)
					temp_flt=0.3750;
				if(test_wt[u]>0.3750 && test_wt[u]<=0.4375)
					temp_flt=0.4375;
				if(test_wt[u]>0.4375 && test_wt[u]<=0.5000)
					temp_flt=0.5000;
				if(test_wt[u]>0.5000 && test_wt[u]<=0.6250)
					temp_flt=0.0625;
				if(test_wt[u]>0.6250 && test_wt[u]<=0.6875)
					temp_flt=0.6875;
				if(test_wt[u]>0.6875 && test_wt[u]<=0.7500)
					temp_flt=0.7500;
				if(test_wt[u]>0.7500 && test_wt[u]<=0.8125)
					temp_flt=0.8125;
				if(test_wt[u]>0.8125 && test_wt[u]<=0.9375)
					temp_flt=0.9375;
				if(test_wt[u]>0.9375)
					temp_flt= ceil(test_wt[u]);

               if (temp_flt>150)
               {
                    temp_flt=151;
               }
               DBRecordsInsert(2,13,0,1);
               rec=DBRecordsGetNum(2,13);
               DBDataSetAsNumber(2,13,1,rec,orderid);
               DBDataSetAsNumber(2,13,2,rec,test1[u]);
               DBDataSetAsNumber(2,13,3,rec,pcl_cnt);
               DBDataSetAsNumber(2,13,4,rec,temp_flt);
                  fc=test1[u]-7;
               zone=dbdatagetasnumber(2,15,custzip1,fc);
               DBDataSetAsNumber(2,13,5,rec,zone);
                  DBDataSetAsNumber(2,13,6,rec,1);
        }
   }
}

/* over pack*/
sumofwt=0.0;
sum_pcl_units=0;
for(u = 0; u < 7 ; u++)
{
   if(test1[u] != 0 && test_sa[u] == 0)
   {
          if(test1[u]==test1[u+1])
          {
				sumofwt=sumofwt+(test_wt[u]*test_oq[u]);
				sum_pcl_units=sum_pcl_units+test_oq[u];
          }
          else
          {
				pcl_cnt++;
				sumofwt=sumofwt+(test_wt[u]*test_oq[u]);
				sum_pcl_units=sum_pcl_units+test_oq[u];

				if(sumofwt>0 && sumofwt<=0.0625)
					temp_flt=0.0625;
				if(sumofwt>0.0625 && sumofwt<=0.1250)
					temp_flt=0.1250;
				if(sumofwt>0.1250 && sumofwt<=0.1875)
					temp_flt=0.1875;
				if(sumofwt>0.1875 && sumofwt<=0.2500)
					temp_flt=0.2500;
				if(sumofwt>0.2500 && sumofwt<=0.3125)
					temp_flt=0.3125;
				if(sumofwt>0.3125 && sumofwt<=0.3750)
					temp_flt=0.3750;
				if(sumofwt>0.3750 && sumofwt<=0.4375)
					temp_flt=0.4375;
				if(sumofwt>0.4375 && sumofwt<=0.5000)
					temp_flt=0.5000;
				if(sumofwt>0.5000 && sumofwt<=0.6250)
					temp_flt=0.0625;
				if(sumofwt>0.6250 && sumofwt<=0.6875)
					temp_flt=0.6875;
				if(sumofwt>0.6875 && sumofwt<=0.7500)
					temp_flt=0.7500;
				if(sumofwt>0.7500 && sumofwt<=0.8125)
					temp_flt=0.8125;
				if(sumofwt>0.8125 && sumofwt<=0.9375)
					temp_flt=0.9375;
				if(sumofwt>0.9375)
					temp_flt= ceil(sumofwt);
				
               if (temp_flt>150)
               {
                    temp_flt=151;
               }
               DBRecordsInsert(2,13,0,1);
               rec=DBRecordsGetNum(2,13);
               DBDataSetAsNumber(2,13,1,rec,orderid);
               DBDataSetAsNumber(2,13,2,rec,test1[u]);
               DBDataSetAsNumber(2,13,3,rec,pcl_cnt);
               DBDataSetAsNumber(2,13,4,rec,temp_flt);
				fc=test1[u]-7;
				zone=dbdatagetasnumber(2,15,custzip1,fc);
				DBDataSetAsNumber(2,13,5,rec,zone);
				DBDataSetAsNumber(2,13,6,rec,sum_pcl_units);
				sumofwt=0.0;
				sum_pcl_units=0;
          }
   }
}
u=7;
if(test1[u]>0 && test_sa[u] == 0)
{
	sumofwt=sumofwt+(test_wt[u]*test_oq[u]);
	sum_pcl_units=sum_pcl_units+test_oq[u];
	
	if(sumofwt>0 && sumofwt<=0.0625)
		temp_flt=0.0625;
	if(sumofwt>0.0625 && sumofwt<=0.1250)
		temp_flt=0.1250;
	if(sumofwt>0.1250 && sumofwt<=0.1875)
		temp_flt=0.1875;
	if(sumofwt>0.1875 && sumofwt<=0.2500)
		temp_flt=0.2500;
	if(sumofwt>0.2500 && sumofwt<=0.3125)
		temp_flt=0.3125;
	if(sumofwt>0.3125 && sumofwt<=0.3750)
		temp_flt=0.3750;
	if(sumofwt>0.3750 && sumofwt<=0.4375)
		temp_flt=0.4375;
	if(sumofwt>0.4375 && sumofwt<=0.5000)
		temp_flt=0.5000;
	if(sumofwt>0.5000 && sumofwt<=0.6250)
		temp_flt=0.0625;
	if(sumofwt>0.6250 && sumofwt<=0.6875)
		temp_flt=0.6875;
	if(sumofwt>0.6875 && sumofwt<=0.7500)
		temp_flt=0.7500;
	if(sumofwt>0.7500 && sumofwt<=0.8125)
		temp_flt=0.8125;
	if(sumofwt>0.8125 && sumofwt<=0.9375)
		temp_flt=0.9375;
	if(sumofwt>0.9375)
		temp_flt= ceil(sumofwt);
      
     if (temp_flt>150)
     {
          temp_flt=151;
     }
     if(test1[u]!=test1[u-1])
     {
          pcl_cnt++;
     }
     
     DBRecordsInsert(2,13,0,1);
     rec=DBRecordsGetNum(2,13);
     DBDataSetAsNumber(2,13,1,rec,orderid);
     DBDataSetAsNumber(2,13,2,rec,test1[u]);
     DBDataSetAsNumber(2,13,3,rec,pcl_cnt);
     DBDataSetAsNumber(2,13,4,rec,temp_flt);
      fc=test1[u]-7;
     zone=dbdatagetasnumber(2,15,custzip1,fc);
     DBDataSetAsNumber(2,13,5,rec,zone);
      DBDataSetAsNumber(2,13,6,rec,sum_pcl_units);
}

//Writing Throughput utilized
sumofunits=0;
for(u = 0; u < 7 ; u++)
{
   if(test1[u] != 0)
   {
          if(test1[u]==test1[u+1])
          {
                if(test1[u] < 15)
                    {
                      sumofunits = sumofunits+oq[u];
                    }
          }
          else
          {
                ordmax_recnum = (test1[u] - 8)*365+ceil(currenttime);
                tptavailable = dbdatagetasnumber(2,12,4,ordmax_recnum);
                if(test1[u] < 15)
                {
                    tptavailable = tptavailable - sumofunits-oq[u];
                }
                else
                {
                    tptavailable = tptavailable - 1;
                }
                DBDataSetAsNumber(2,12,4,ordmax_recnum,tptavailable);
                sumofunits=0;
                sumofwt=0.0;
          }
   }
}

u=7;
if(test1[u]>0 )
{
     ordmax_recnum = (test1[u] - 8)*365+ceil(currenttime);
     tptavailable = dbdatagetasnumber(2,12,4,ordmax_recnum);
     if(test1[u] < 15)
     {
          tptavailable = tptavailable - sumofunits-oq[u];
     }
     else
     {
          tptavailable = tptavailable - 1;
     }
     
     DBDataSetAsNumber(2,12,4,ordmax_recnum,tptavailable);
}
